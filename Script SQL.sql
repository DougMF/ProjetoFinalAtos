DROP DATABASE IF EXISTS ENCOMENDAS;
CREATE DATABASE ENCOMENDAS;

USE ENCOMENDAS;

CREATE TABLE CIDADE(
	ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(60)
);

CREATE TABLE BAIRRO(
	ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    CIDADE_ID INT NOT NULL,
    NOME VARCHAR(30),
    FOREIGN KEY (CIDADE_ID) REFERENCES CIDADE(ID)
    ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE LOGRADOURO(
	ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    BAIRRO_ID INT NOT NULL,
    NOME VARCHAR(30),
    FOREIGN KEY (BAIRRO_ID) REFERENCES BAIRRO(ID)
    ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE ENDERECO(
	ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    LOGRADOURO_ID INT NOT NULL,
    NUMERO INT,
    COMPLEMENTO VARCHAR (50),
    CEP CHAR(8),
    FOREIGN KEY (LOGRADOURO_ID) REFERENCES LOGRADOURO(ID)
    ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE CLIENTE(
	ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    ENDERECO_ID INT NOT NULL,
    NOME VARCHAR(60),
    CPF CHAR(11) UNIQUE,
    TELEFONE VARCHAR(14),
    FOREIGN KEY (ENDERECO_ID) REFERENCES ENDERECO(ID)
    ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE INSUMO(
	ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(25) UNIQUE,
    VALOR NUMERIC (15,2),
    QTDESTOQUE INT DEFAULT 0
);

CREATE TABLE PAGAMENTO(
	ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(30) UNIQUE
);

CREATE TABLE ENCOMENDA(
	ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    CLIENTE_ID INT NOT NULL,
    DATA DATE,
    HORA TIME,
    PAGAMENTO_ID INT NOT NULL,
    STATUS_PGTO VARCHAR(10) DEFAULT 'Em aberto',
    ENTREGA VARCHAR(13),
    OBS VARCHAR(50),
    TOTAL NUMERIC(15,2) DEFAULT 0,
    FOREIGN KEY (CLIENTE_ID) REFERENCES CLIENTE(ID)
    ON DELETE RESTRICT ON UPDATE CASCADE,
    FOREIGN KEY (PAGAMENTO_ID) REFERENCES PAGAMENTO(ID)
    ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE ENCOMENDA_INSUMO(
	ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    ENCOMENDA_ID INT NOT NULL,
    INSUMO_ID INT NOT NULL,
    QTD INT,
    FOREIGN KEY (ENCOMENDA_ID) REFERENCES ENCOMENDA(ID)
    ON DELETE RESTRICT ON UPDATE CASCADE,
    FOREIGN KEY (INSUMO_ID) REFERENCES INSUMO(ID)
    ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE HISTORICO(
	ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    INSUMO_ID INT NOT NULL,
    DATA DATE,
    QTD INT,
    VALOR NUMERIC(15,2),
    FOREIGN KEY (INSUMO_ID) REFERENCES INSUMO(ID)
    ON DELETE CASCADE ON UPDATE CASCADE
);

-- REMOVE A ENCOMENDA DO SISTEMA E REPÕE OS ITEM DA ENCOMENDA NO ESTOQUE 
DELIMITER //
CREATE PROCEDURE SP_CANCELAR_ENCOMENDA(IN ENCOMENDA_ID INT)
BEGIN
    -- ATUALIZA A QUANTIDADE DO INSUMO CANCELADO
    UPDATE INSUMO I
    INNER JOIN ENCOMENDA_INSUMO EI ON EI.INSUMO_ID = I.ID    
    INNER JOIN ENCOMENDA E ON E.ID = EI.ENCOMENDA_ID   
    SET I.QTDESTOQUE = I.QTDESTOQUE + (SELECT EI.QTD FROM ENCOMENDA_INSUMO EIN
									   WHERE (EIN.ENCOMENDA_ID = ENCOMENDA_ID) AND (EIN.INSUMO_ID = I.ID));
	
    -- REMOVE A ENCOMENDA
    DELETE FROM ENCOMENDA WHERE ID = ENCOMENDA_ID;
END
//DELIMITER ;

-- REMOVE A ENCOMENDA DO SISTEMA E ADICIONA O ITEM AO HISTÓRICO
DELIMITER //
CREATE PROCEDURE SP_FINALIZAR_ENCOMENDA(IN ENCOMENDA_ID INT)
BEGIN
    -- INSERE OS DADOS DOS INSUMOS DA ENCOMENDA NO HISTÓRICO
    INSERT INTO HISTORICO (INSUMO_ID, DATA, QTD)
		SELECT EI.INSUMO_ID, E.DATA, EI.QTD FROM ENCOMENDA_INSUMO EI
        INNER JOIN ENCOMENDA E ON E.ID = EI.ENCOMENDA_ID
        WHERE E.ID = ENCOMENDA_ID;
	
    -- REMOVE A ENCOMENDA
    DELETE FROM ENCOMENDA WHERE ID = ENCOMENDA_ID;
END
//DELIMITER ;

-- ATUALIZA A QUANTIDADE DE UM INSUMO NO ESTOQUE
DELIMITER //
CREATE PROCEDURE SP_ATUALIZAR_QTDESTOQUE_INSUMO(IN QTD INT, IN INSUMO_ID INT)
BEGIN
	UPDATE INSUMO
	SET QTDESTOQUE = QTDESTOQUE + QTD
	WHERE ID = INSUMO_ID;
END
//DELIMITER ;

DELIMITER //
CREATE PROCEDURE SP_INSERIR_ON_DUPLICATE(IN ENCOMENDA INT, IN INSUMO INT, IN QTDINSUMO INT)
BEGIN
	INSERT INTO ENCOMENDA_INSUMO (ENCOMENDA_ID, INSUMO_ID, QTD) VALUES (ENCOMENDA, INSUMO, QTDINSUMO) ON DUPLICATE KEY UPDATE QTD = QTD + QTDINSUMO;
END
//DELIMITER ;

-- ATUALIZA O VALOR TOTAL DA ENCOMENDA
DELIMITER //
CREATE PROCEDURE SP_ATUALIZAR_TOTAL_ENCOMENDA(IN INSUMO_TOTAL DECIMAL(15, 2), IN ENCOMENDA_ID INT)
BEGIN
	UPDATE ENCOMENDA
    SET TOTAL = TOTAL + INSUMO_TOTAL
    WHERE ID = ENCOMENDA_ID;
END
//DELIMITER ;

-- SUBTRAI A QUANTIDADE DO INSUMO NO ESTOQUE E SOMA O TOTAL DA ENCOMENDA AO ADICIONAR O INSUMO À MESMA 
DELIMITER //
CREATE TRIGGER T_SUBTRAIR_QTDESTOQUE_INSUMO_TOTAL_ENCOMENDA
AFTER INSERT ON ENCOMENDA_INSUMO
FOR EACH ROW
BEGIN
	CALL SP_ATUALIZAR_QTDESTOQUE_INSUMO((SELECT EI.QTD FROM ENCOMENDA_INSUMO EI
										 WHERE EI.ID = NEW.ID)*-1, NEW.INSUMO_ID);
	CALL SP_ATUALIZAR_TOTAL_ENCOMENDA((SELECT (EI.QTD * I.VALOR) FROM ENCOMENDA_INSUMO EI
									   INNER JOIN INSUMO I ON I.ID = EI.INSUMO_ID
                                       WHERE EI.ID = NEW.ID), NEW.ENCOMENDA_ID);
END
//DELIMITER ;

-- ATUALIZA A QUANTIDADE DE INSUMOS E O TOTAL DA ENCOMENDA AO ALTERAR A QUANTIDADE DO INSUMO DA ENCOMENDA
DELIMITER //
CREATE TRIGGER T_ATUALIZAR_QTDESTOQUE_TOTAL_ENCOMENDA
AFTER UPDATE ON ENCOMENDA_INSUMO
FOR EACH ROW
BEGIN
	CALL SP_ATUALIZAR_QTDESTOQUE_INSUMO((OLD.QTD - NEW.QTD), NEW.INSUMO_ID);
	CALL SP_ATUALIZAR_TOTAL_ENCOMENDA((SELECT ((NEW.QTD - OLD.QTD) * I.VALOR) FROM ENCOMENDA_INSUMO EI
										   INNER JOIN INSUMO I ON I.ID = EI.INSUMO_ID
										   WHERE EI.ID = NEW.ID), NEW.ENCOMENDA_ID);
END
//DELIMITER ;

-- SOMA A QUANTIDADE DO INSUMO E SUBTRAI O TOTAL DA ENCOMENDA AO REMOVER O INSUMO DA MESMA 
DELIMITER //
CREATE TRIGGER T_SOMAR_QTDESTOQUE_TOTAL_ENCOMENDA
BEFORE DELETE ON ENCOMENDA_INSUMO
FOR EACH ROW
BEGIN
	CALL SP_ATUALIZAR_QTDESTOQUE_INSUMO((SELECT EI.QTD FROM ENCOMENDA_INSUMO EI
										 WHERE EI.ID = OLD.ID), OLD.INSUMO_ID);
	CALL SP_ATUALIZAR_TOTAL_ENCOMENDA((SELECT (EI.QTD * I.VALOR) FROM ENCOMENDA_INSUMO EI
									   INNER JOIN INSUMO I ON I.ID = EI.INSUMO_ID
                                       WHERE EI.ID = OLD.ID)*-1, OLD.ENCOMENDA_ID);
END
//DELIMITER ;

-- EVITA QUE REGISTROS DUPLICADOS SEJAM CRIADOS NA TABELA ENCOMENDA_INSUMO
DELIMITER //
CREATE TRIGGER T_SOMAR_QTDESTOQUE_INSUMO
BEFORE INSERT ON ENCOMENDA_INSUMO
FOR EACH ROW
BEGIN
	IF NEW.INSUMO_ID IN (SELECT INSUMO_ID FROM ENCOMENDA_INSUMO 
						 WHERE ENCOMENDA_ID = NEW.ENCOMENDA_ID)
	THEN
		SET NEW.ID = (SELECT ID FROM ENCOMENDA_INSUMO 
						 WHERE (ENCOMENDA_ID = NEW.ENCOMENDA_ID) AND (INSUMO_ID = NEW.INSUMO_ID));
	END IF;
END
//DELIMITER ;

-- EVITA QUE UMA ENCOMENDA FIQUE SEM ITENS
DELIMITER //
CREATE TRIGGER T_EVITAR_ENCOMENDA_VAZIA
BEFORE DELETE ON ENCOMENDA_INSUMO
FOR EACH ROW
BEGIN
	IF((SELECT COUNT(EI.ID) FROM ENCOMENDA_INSUMO EI
		WHERE EI.ENCOMENDA_ID = OLD.ENCOMENDA_ID) = 1)
	THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'A encomenda não pode ser vazia!';
	END IF;
END
//DELIMITER ;
